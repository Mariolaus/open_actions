name: Deploy to Cloud Run

on:
  workflow_call:
    inputs:
      service_name:
        description: "Service name for Cloud Run"
        required: true
        type: string
      run_tests:
        description: "should it run python tests?"
        required: false
        type: boolean
        default: true
      run_command:
        description: "docker build command"
        required: false
        type: string
        default: true
      secrets:
        description: "xxx"
        required: false
        type: string
      build_and_deploy:
        description: "build and deploy steps"
        required: false
        type: boolean
        default: true

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      # Add IP to whitelist
      - name: Enable Github worker IP
        id: add_ip
        uses: Mariolaus/open_actions/.github/actions/add_worker_ip@main
        env:
          credentials_json: '${{ secrets.GCP_BUILD_AND_DEPLOY_PROD }}'
          DEVOPS_ENDPOINT: '${{ secrets.DEVOPS_ENDPOINT }}'
        with:
          ip: $(curl ifconfig.me)

      - name: Validate service_name input
        run: |
          NAME="${{ inputs.service_name }}"
          echo "Validating service name: $NAME"
          # Cloud Run service name must:
          # - be <= 63 chars
          # - start with a lowercase letter
          # - only contain lowercase letters, numbers, and dashes
          # - end with a letter or number
          if [[ ! "$NAME" =~ ^[a-z]([-a-z0-9]*[a-z0-9])?$ ]]; then
            echo "❌ ERROR: '$NAME' is not a valid Cloud Run service name"
            exit 1
          fi
          echo "✅ Valid service name"

      - name: run tests
        if: ${{ inputs.run_tests }}
        id: run_tests
        uses: Mariolaus/open_actions/.github/actions/run_tests@main
        env:
          READ_ALL_REPOS_TOKEN: ${{ secrets.READ_ALL_REPOS_TOKEN }}

      - name: Check code quality
        if: github.ref == 'refs/heads/PROD'
        uses: Mariolaus/open_actions/.github/actions/check_code_quality@main
        env:
          READ_ALL_REPOS_TOKEN: ${{ secrets.READ_ALL_REPOS_TOKEN }}

      # Build image and deploy to Cloud Run if we are on branch PROD only
      - name: Build image and Deploy to Cloud Run
        if: github.ref == 'refs/heads/PROD' && inputs.build_and_deploy
        uses: Mariolaus/open_actions/.github/actions/build_image_and_deploy_to_cloud_run@main
        env:
          READ_ALL_REPOS_TOKEN: ${{ secrets.READ_ALL_REPOS_TOKEN }}
          GCP_BUILD_AND_DEPLOY: ${{ secrets.GCP_BUILD_AND_DEPLOY_PROD }}
          PROJECT_ID: ${{ secrets.PROJECT_ID_GCP_PROD }}
        with:
          SERVICE: ${{ inputs.service_name }}
          run_command: ${{ inputs.run_command }}
          secrets: ${{ inputs.secrets }}

      - name: Sanitize branch name for Cloud Run UAT
        if: github.ref != 'refs/heads/PROD'
        id: sanitize
        run: |
          RAW_BRANCH="${GITHUB_REF_NAME}"
          BASE_SERVICE="${{ inputs.service_name }}"
          TRAFFIC_TAG_LENGTH=15  # adjust if your tag format changes
          MAX_TOTAL=46
          # Calculate max branch length
          MAX_BRANCH_LENGTH=$((MAX_TOTAL - ${#BASE_SERVICE} - 1 - TRAFFIC_TAG_LENGTH - 1))
          SAFE_BRANCH=$(echo "$RAW_BRANCH" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/^-*//' | sed 's/-*$//')
          SAFE_BRANCH=${SAFE_BRANCH:0:$MAX_BRANCH_LENGTH}
          echo "SAFE_BRANCH=$SAFE_BRANCH" >> $GITHUB_ENV
          echo "branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT
        shell: bash

      # Build image and deploy to Cloud Run if we are on branch UAT only
      - name: UAT -- Build image and Deploy to Cloud Run
        if: github.ref != 'refs/heads/PROD' && inputs.build_and_deploy
        uses: Mariolaus/open_actions/.github/actions/build_image_and_deploy_to_cloud_run@main
        env:
          READ_ALL_REPOS_TOKEN: ${{ secrets.READ_ALL_REPOS_TOKEN }}
          GCP_BUILD_AND_DEPLOY: ${{ secrets.GCP_BUILD_AND_DEPLOY_UAT }}
          PROJECT_ID: ${{ secrets.PROJECT_ID_GCP_UAT }}
        with:
          SERVICE: ${{ inputs.service_name }}-${{ steps.sanitize.outputs.branch }}
          run_command: ${{ inputs.run_command }}
          secrets: ${{ inputs.secrets }}

      # Clean up: Remove IP from whitelist
      - name: Disable Github worker IP
        uses: Mariolaus/open_actions/.github/actions/delete_worker_ip@main
        if: always()
        env:
          DEVOPS_ENDPOINT: '${{ secrets.DEVOPS_ENDPOINT }}'
          credentials_json: '${{ secrets.GCP_BUILD_AND_DEPLOY_PROD }}'
        with:
          github_id: "${{ steps.add_ip.outputs.github_id }}"