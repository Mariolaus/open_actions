name: 'Setup GCP Service Account'
description: 'Creates a GCP service account with Cloud Run and Secret Manager access.'
inputs:
  gcp_project:
    description: 'GCP Project ID'
    required: true
  cloudrun_service:
    description: 'Cloud Run service name'
    required: true
  secrets_list:
    description: 'Comma-separated list of Secret Manager secrets'
    required: true
  REGION:
    description: "Gcloud Region"
    required: false
    default: "europe-west8"

runs:
  using: "composite"
  steps:
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GCP_BUILD_AND_DEPLOY_PROD }}

    # Set up Google Cloud SDK
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Derive service account ID
      id: derive_sa
      shell: bash
      run: |
        # Derive from Cloud Run service name (alphanumeric, lowercase, max 30 chars)
        SA_ID=$(echo "${{ inputs.cloudrun_service }}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-' | cut -c1-30)
        echo "service_account_id=$SA_ID" >> "$GITHUB_OUTPUT"

    - name: Create service account
      shell: bash
      run: |
        gcloud iam service-accounts create "${{ steps.derive_sa.outputs.service_account_id }}" \
          --description="Service account for Cloud Run and Secrets" \
          --display-name="GitHub Action Service Account"

    - name: Grant Cloud Run invoke permission
      shell: bash
      run: |
        SERVICE_EMAIL="${{ steps.derive_sa.outputs.service_account_id }}@${{ inputs.gcp_project }}.iam.gserviceaccount.com"
        gcloud run services add-iam-policy-binding "${{ inputs.cloudrun_service }}" \
          --region="${{ inputs.REGION }}" \
          --member="serviceAccount:$SERVICE_EMAIL" \
          --role="roles/run.invoker"

    - name: Grant Secret Manager access
      shell: bash
      run: |
        SERVICE_EMAIL="${{ steps.derive_sa.outputs.service_account_id }}@${{ inputs.gcp_project }}.iam.gserviceaccount.com"
        IFS=',' read -ra SECRETS <<< "${{ inputs.secrets_list }}"
        for SECRET in "${SECRETS[@]}"; do
          gcloud secrets add-iam-policy-binding "$SECRET" \
            --member="serviceAccount:$SERVICE_EMAIL" \
            --role="roles/secretmanager.secretAccessor"
        done
